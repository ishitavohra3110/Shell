2c2
< void execLs(char *dir)
---
> char *readCmd()
4,9c4,10
< 	DIR*p;
< 	struct dirent *d;
< 	p = opendir(dir);
< 	if(p == NULL)
< 		perror("Cannot find directory");
< 	else
---
> 	int bufSize,pos;
> 	bufSize = num2;
> 	pos = 0;
> 	char *buf;
> 	buf = malloc(sizeof(char) * bufSize);
> 	int c;
> 	while(1)
11c12,13
< 		while(d = readdir(p))
---
> 		c = getchar();
> 		if (c == EOF || c == '\n')
13,15c15,16
< 			if(d->d_name[0] == '.')
< 				continue;
< 			printf("%s\n",d->d_name);
---
> 			buf[pos] = '\0';
> 			return buf;
16a18,20
> 		else
> 			buf[pos] = c;
> 		pos++;
18,70d21
< }
< void permissions(char *file)
< {
< 	char perm[11];
< 	struct stat st;
< 	stat(file,&st);
< 	if(S_ISDIR(st.st_mode))
< 		perm[0] = 'd';
< 	else if(S_ISREG(st.st_mode))
< 		perm[0] = '-';
< 	else if(S_ISFIFO(st.st_mode))
< 		perm[0] = '|';
< 	else if(S_ISSOCK(st.st_mode))
< 		perm[0] = 's';
< 	else if(S_ISCHR(st.st_mode))
< 		perm[0] = 'c';
< 	else if(S_ISBLK(st.st_mode))
< 		perm[0] = 'b';
< 	else
< 		perm[0] = 'l';
< 	perm[1] = (st.st_mode & S_IRUSR) ? 'r' : '-';
< 	perm[2] = (st.st_mode & S_IWUSR)  ? 'w' : '-';
< 	perm[3] = (st.st_mode & S_IXUSR)  ? 'x' : '-';
< 	perm[4] = (st.st_mode & S_IRGRP)  ? 'r' : '-';
< 	perm[5] = (st.st_mode & S_IWGRP)  ? 'w' : '-';
< 	perm[6] = (st.st_mode & S_IXGRP)  ? 'x' : '-';
< 	perm[7] = (st.st_mode & S_IROTH)  ? 'r' : '-';
< 	perm[8] = (st.st_mode & S_IWOTH)  ? 'w' : '-';
< 	perm[9] = (st.st_mode & S_IXOTH)  ? 'x' : '-';
< 	perm[10] = '\0';
< 	printf("%s ",perm);
< 	printf("%d ",(int)st.st_nlink);
< 	return;
< }
< void user_gp_time(char *file)
< {
< 	struct group *grp;
< 	struct passwd *pwd;
< 	struct stat st; 
< 	char datestring[num2];
< 	struct tm time;
< 	stat(file,&st);
< 	int uid = st.st_uid;
< 	int gid = st.st_gid;
< 	grp = getgrgid(gid);
< 	printf("%s ",grp->gr_name);
< 	pwd = getpwuid(uid);
< 	printf("%s ",pwd->pw_name);
< 	printf("%d ",(int)st.st_size);
< 	localtime_r(&st.st_mtime,&time);
< 	strftime(datestring,sizeof(datestring),"%b %d %T",&time);
< 	printf("%s",datestring);
< 	return;
73c24
< void execLs_l(char *dir)
---
> char **parseCmd(char *cmd)
75,81c26,32
< 	DIR*p;
< 	char *f;
< 	struct dirent *d;
< 	p = opendir(dir);
< 	if(p == NULL)
< 		perror("Cannot find directory");
< 	else
---
> 	cnt = 0;
> 	int pos=0;
> 	char *token;
> 	char **tokens;
> 	tokens = malloc(num2 * sz(char));
> 	token = strtok(cmd," ");
> 	while(token!=NULL)
83,102c34,40
< 		char now[num2],temp[num2];
< 		memset(now,0,sizeof(now));
< 		loop(i,0,strlen(dir))
< 			now[i]=dir[i];
< 		while(d = readdir(p))
< 		{
< 		//	break;
< 
< 		//	printf("")
< 			if(d->d_name[0] == '.')
< 				continue;
< 			strcpy(temp,now);
< 			strcat(temp,"/");
< 			strcat(temp,d->d_name);
< 		//	printf("%s %s\n",temp,now);
< 
< 			permissions(temp);
< 			user_gp_time(temp);
< 			printf(" %s\n",d->d_name);
< 		}
---
> 		//printf("!");
> 		cnt+=1;
> 		tokens[pos] = token;
> 		token = strtok(NULL," ");
> 		if(strcmp(tokens[pos],";")==0)
> 			tokens[pos] = NULL;
> 		pos+=1;
103a42
> 	return tokens;
105,143d43
< void execLs_a(char *dir)
< {
< 	DIR*p;
< 	struct dirent *d;
< 	p = opendir(dir);
< 	if(p == NULL)
< 		perror("Cannot find directory");
< 	else
< 	{
< 		while(d = readdir(p))
< 			printf("%s\n",d->d_name);
< 	}
< }
< void execLs_la(char *dir)
< {
< 	DIR*p;
< 	char *f;
< 	struct dirent *d;
< 	p = opendir(dir);
< 	if(p == NULL)
< 		perror("Cannot find directory");
< 	else
< 	{
< 		char now[num2],temp[num2];
< 		memset(now,0,sizeof(now));
< 		loop(i,0,strlen(dir))
< 			now[i]=dir[i];
< 		while(d = readdir(p))
< 		{
< 			f = d->d_name;
< 			strcpy(temp,now);
< 			strcat(temp,"/");
< 			strcat(temp,f);
< 			permissions(temp);
< 			user_gp_time(temp);
< 			printf(" %s\n",d->d_name);
< 		}
< 	}
< }
\ No newline at end of file
